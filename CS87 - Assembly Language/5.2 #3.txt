.586
.MODEL FLAT
.STACK  4096        ; reserve 4096-byte stack


.DATA               ; reserve storage for data

num1 DWORD 10
num2 DWORD 18
num3 DWORD 6

.CODE               ; start of main program code

main    PROC

	push num3
	push num2
	push num1		;stores variables on the stack
	call max3			;calls max procedure

	add esp, 12		;restores stack pointer
	ret

main ENDP

;function returns the value of larger number

max3 PROC

	push ebp
	mov ebp, esp		;saves & moves base pointer
	
	push ebx
	push ecx	
	push edx			;saves registers we are going to use

	mov ebx, [ebp+8]	;moves num1(10) into ebx
	mov ecx, [ebp+12]	;moves num2(18)	into ecx
	mov edx, [ebp+16]	;moves num3(6)	into ecx

	cmp ebx, ecx		;compares num1 and num2
	jg GREATER1			;jumps if num1 is greater than num2

	cmp ecx, edx		;since num1 wasnt bigger than num2
	jl GREATER3			;we comapre num2 to num3 and jump out if
						;num3 is larger

	mov eax, ecx		;this moves num2 into eax if the above
						;jumps were not made, if the above jups were
						;not made it means that num2 was largest

		pop edx					
		pop ecx
		pop ebx				;restores registers
		pop ebp				;restores base pointer

		ret

	GREATER1:
		cmp ebx, edx	;jumped becasue num1 was bigger than num2
						;now compares to num3

		jg GREATER2		; jumps if num1 is greater than num3, if this
						; jump isnt made we can infer that num3 was larger
						;than both num1 and num2


	GREATER3:			;this is here for a jump in teh case of num3
						;being  larger than num2 but num2 was larger than num1
						;in the above test 

		mov eax, edx	

		pop edx					
		pop ecx
		pop ebx				;restores registers
		pop ebp				;restores base pointer
		ret
	
	GREATER2:
		mov eax, ebx	;since num1 was bigger than num3
						;it was stored in eax
						;so it can be returned to main

		pop edx					
		pop ecx
		pop ebx				;restores registers
		pop ebp				;restores base pointer
		ret



max3 ENDP

END